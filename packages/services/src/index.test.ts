/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
import {
  Context,
  createInstance,
  waitForInstanceReady
} from '@osaas/client-core';
import * as sdk from '.';

jest.mock('@osaas/client-core', () => {
  return {
    createInstance: jest.fn().mockResolvedValue({ name: 'sdk' }),
    waitForInstanceReady: jest.fn(),
    Context: jest.fn().mockImplementation(() => {
      return {
        getServiceAccessToken: jest.fn().mockResolvedValue('token')
      };
    })
  };
});

describe('createChannelEngineInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createChannelEngineInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('channel-engine');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'channel-engine',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'channel-engine',
      'sdk',
      ctx
    );
  });
});

describe('createEncoreInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEncoreInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('encore');
    expect(createInstance).toHaveBeenCalledWith(ctx, 'encore', 'token', body);
    expect(waitForInstanceReady).toHaveBeenCalledWith('encore', 'sdk', ctx);
  });
});

describe('createEyevinnTestAdserverInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnTestAdserverInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-test-adserver'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-test-adserver',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-test-adserver',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnChaosStreamProxyInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnChaosStreamProxyInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-chaos-stream-proxy'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-chaos-stream-proxy',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-chaos-stream-proxy',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnChannelEngineBridgeInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnChannelEngineBridgeInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-channel-engine-bridge'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-channel-engine-bridge',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-channel-engine-bridge',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnAutoSubtitlesInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnAutoSubtitlesInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-auto-subtitles'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-auto-subtitles',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-auto-subtitles',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnLambdaStitchInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnLambdaStitchInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-lambda-stitch'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-lambda-stitch',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-lambda-stitch',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnFunctionScenesInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnFunctionScenesInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-function-scenes'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-function-scenes',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-function-scenes',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnPreviewHlsServiceInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnPreviewHlsServiceInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-preview-hls-service'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-preview-hls-service',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-preview-hls-service',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnHlsMonitorInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnHlsMonitorInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-hls-monitor'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-hls-monitor',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-hls-monitor',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnCastReceiverInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnCastReceiverInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-cast-receiver'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-cast-receiver',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-cast-receiver',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnFunctionProbeInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnFunctionProbeInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-function-probe'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-function-probe',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-function-probe',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnScheduleServiceInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnScheduleServiceInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-schedule-service'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-schedule-service',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-schedule-service',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnRustImageProcessorInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnRustImageProcessorInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-rust-image-processor'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-rust-image-processor',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-rust-image-processor',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnContinueWatchingApiInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnContinueWatchingApiInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-continue-watching-api'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-continue-watching-api',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-continue-watching-api',
      'sdk',
      ctx
    );
  });
});

describe('createFlyimgFlyimgInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createFlyimgFlyimgInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('flyimg-flyimg');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'flyimg-flyimg',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'flyimg-flyimg',
      'sdk',
      ctx
    );
  });
});

describe('createRestorecommercePdfRenderingSrvInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createRestorecommercePdfRenderingSrvInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'restorecommerce-pdf-rendering-srv'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'restorecommerce-pdf-rendering-srv',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'restorecommerce-pdf-rendering-srv',
      'sdk',
      ctx
    );
  });
});

describe('createBbcBraveInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createBbcBraveInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('bbc-brave');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'bbc-brave',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith('bbc-brave', 'sdk', ctx);
  });
});

describe('createEyevinnFunctionTrimInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnFunctionTrimInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-function-trim'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-function-trim',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-function-trim',
      'sdk',
      ctx
    );
  });
});

describe('createDatarheiRestreamerInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createDatarheiRestreamerInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'datarhei-restreamer'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'datarhei-restreamer',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'datarhei-restreamer',
      'sdk',
      ctx
    );
  });
});

describe('createOwncastOwncastInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createOwncastOwncastInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('owncast-owncast');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'owncast-owncast',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'owncast-owncast',
      'sdk',
      ctx
    );
  });
});

describe('createOssrsSrsInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createOssrsSrsInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('ossrs-srs');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'ossrs-srs',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith('ossrs-srs', 'sdk', ctx);
  });
});

describe('createGwuhaolinLivegoInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createGwuhaolinLivegoInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('gwuhaolin-livego');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'gwuhaolin-livego',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'gwuhaolin-livego',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnIntercomManagerInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnIntercomManagerInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-intercom-manager'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-intercom-manager',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-intercom-manager',
      'sdk',
      ctx
    );
  });
});

describe('createValkeyIoValkeyInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createValkeyIoValkeyInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('valkey-io-valkey');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'valkey-io-valkey',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'valkey-io-valkey',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnSrtWhepInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnSrtWhepInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('eyevinn-srt-whep');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-srt-whep',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-srt-whep',
      'sdk',
      ctx
    );
  });
});

describe('createDashIndustryForumLivesim2Instance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createDashIndustryForumLivesim2Instance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'dash-industry-forum-livesim2'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'dash-industry-forum-livesim2',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'dash-industry-forum-livesim2',
      'sdk',
      ctx
    );
  });
});

describe('createUsefathomFathomInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createUsefathomFathomInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('usefathom-fathom');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'usefathom-fathom',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'usefathom-fathom',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnEncoreCallbackListenerInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnEncoreCallbackListenerInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-encore-callback-listener'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-encore-callback-listener',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-encore-callback-listener',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnEncorePackagerInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnEncorePackagerInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-encore-packager'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-encore-packager',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-encore-packager',
      'sdk',
      ctx
    );
  });
});

describe('createSmrchyRestRsmqInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createSmrchyRestRsmqInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('smrchy-rest-rsmq');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'smrchy-rest-rsmq',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'smrchy-rest-rsmq',
      'sdk',
      ctx
    );
  });
});

describe('createMinioMinioInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createMinioMinioInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('minio-minio');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'minio-minio',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'minio-minio',
      'sdk',
      ctx
    );
  });
});

describe('createPoundifdefSmoothmqInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createPoundifdefSmoothmqInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'poundifdef-smoothmq'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'poundifdef-smoothmq',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'poundifdef-smoothmq',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnEncoreTransferInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnEncoreTransferInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-encore-transfer'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-encore-transfer',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-encore-transfer',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnLiveEncodingInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnLiveEncodingInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-live-encoding'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-live-encoding',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-live-encoding',
      'sdk',
      ctx
    );
  });
});

describe('createBwallbergKingsAndPigsTsInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createBwallbergKingsAndPigsTsInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'bwallberg-kings-and-pigs-ts'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'bwallberg-kings-and-pigs-ts',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'bwallberg-kings-and-pigs-ts',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnSmbWhipBridgeInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnSmbWhipBridgeInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-smb-whip-bridge'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-smb-whip-bridge',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-smb-whip-bridge',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnWrtcEgressInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnWrtcEgressInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-wrtc-egress'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-wrtc-egress',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-wrtc-egress',
      'sdk',
      ctx
    );
  });
});

describe('createSwaggerApiSwaggerEditorInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createSwaggerApiSwaggerEditorInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'swagger-api-swagger-editor'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'swagger-api-swagger-editor',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'swagger-api-swagger-editor',
      'sdk',
      ctx
    );
  });
});

describe('createRealeyesMediaMoeReplayInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createRealeyesMediaMoeReplayInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'realeyes-media-moe-replay'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'realeyes-media-moe-replay',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'realeyes-media-moe-replay',
      'sdk',
      ctx
    );
  });
});

describe('createItzgDockerMinecraftServerInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createItzgDockerMinecraftServerInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'itzg-docker-minecraft-server'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'itzg-docker-minecraft-server',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'itzg-docker-minecraft-server',
      'sdk',
      ctx
    );
  });
});

describe('createBirmeLambdaInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createBirmeLambdaInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('birme-lambda');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'birme-lambda',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'birme-lambda',
      'sdk',
      ctx
    );
  });
});

describe('createLinuxserverDockerMariadbInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createLinuxserverDockerMariadbInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'linuxserver-docker-mariadb'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'linuxserver-docker-mariadb',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'linuxserver-docker-mariadb',
      'sdk',
      ctx
    );
  });
});

describe('createAlexbj75MovierecommendatorInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createAlexbj75MovierecommendatorInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'alexbj75-movierecommendator'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'alexbj75-movierecommendator',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'alexbj75-movierecommendator',
      'sdk',
      ctx
    );
  });
});

describe('createBirmeContactFormSvcInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createBirmeContactFormSvcInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'birme-contact-form-svc'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'birme-contact-form-svc',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'birme-contact-form-svc',
      'sdk',
      ctx
    );
  });
});

describe('createBirmeCaptchaSvcInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createBirmeCaptchaSvcInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('birme-captcha-svc');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'birme-captcha-svc',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'birme-captcha-svc',
      'sdk',
      ctx
    );
  });
});

describe('createAlexbj7590stvInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createAlexbj7590stvInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('alexbj75-90stv');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'alexbj75-90stv',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'alexbj75-90stv',
      'sdk',
      ctx
    );
  });
});

describe('createAnderswassenChaosproxyConfigInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createAnderswassenChaosproxyConfigInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'anderswassen-chaosproxy-config'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'anderswassen-chaosproxy-config',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'anderswassen-chaosproxy-config',
      'sdk',
      ctx
    );
  });
});

describe('createWordpressWordpressInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createWordpressWordpressInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'wordpress-wordpress'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'wordpress-wordpress',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'wordpress-wordpress',
      'sdk',
      ctx
    );
  });
});

describe('createOlawalejuwonmAnomalydetectorInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createOlawalejuwonmAnomalydetectorInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'olawalejuwonm-anomalydetector'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'olawalejuwonm-anomalydetector',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'olawalejuwonm-anomalydetector',
      'sdk',
      ctx
    );
  });
});

describe('createAtmozSftpInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createAtmozSftpInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('atmoz-sftp');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'atmoz-sftp',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith('atmoz-sftp', 'sdk', ctx);
  });
});

describe('createJoeldelpilarTicTacVueInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createJoeldelpilarTicTacVueInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'joeldelpilar-tic-tac-vue'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'joeldelpilar-tic-tac-vue',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'joeldelpilar-tic-tac-vue',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnQrGeneratorInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnQrGeneratorInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-qr-generator'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-qr-generator',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-qr-generator',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnAppConfigSvcInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnAppConfigSvcInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-app-config-svc'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-app-config-svc',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-app-config-svc',
      'sdk',
      ctx
    );
  });
});

describe('createErnestocaroccaHelloWorldInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createErnestocaroccaHelloWorldInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'ernestocarocca-hello-world'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'ernestocarocca-hello-world',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'ernestocarocca-hello-world',
      'sdk',
      ctx
    );
  });
});

describe('createChambanaNetDockerPodcastgenInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createChambanaNetDockerPodcastgenInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'chambana-net-docker-podcastgen'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'chambana-net-docker-podcastgen',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'chambana-net-docker-podcastgen',
      'sdk',
      ctx
    );
  });
});

describe('createAndersnasNodecatInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createAndersnasNodecatInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('andersnas-nodecat');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'andersnas-nodecat',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'andersnas-nodecat',
      'sdk',
      ctx
    );
  });
});

describe('createBirmeOscPostgresqlInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createBirmeOscPostgresqlInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'birme-osc-postgresql'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'birme-osc-postgresql',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'birme-osc-postgresql',
      'sdk',
      ctx
    );
  });
});

describe('createSalesagilitySuitecrmInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createSalesagilitySuitecrmInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'salesagility-suitecrm'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'salesagility-suitecrm',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'salesagility-suitecrm',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnDockerTestsrcHlsLiveInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnDockerTestsrcHlsLiveInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-docker-testsrc-hls-live'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-docker-testsrc-hls-live',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-docker-testsrc-hls-live',
      'sdk',
      ctx
    );
  });
});

describe('createApacheCouchdbInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createApacheCouchdbInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('apache-couchdb');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'apache-couchdb',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'apache-couchdb',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnSgaiAdProxyInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnSgaiAdProxyInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-sgai-ad-proxy'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-sgai-ad-proxy',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-sgai-ad-proxy',
      'sdk',
      ctx
    );
  });
});

describe('createMickaelKerjeanFilestashInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createMickaelKerjeanFilestashInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'mickael-kerjean-filestash'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'mickael-kerjean-filestash',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'mickael-kerjean-filestash',
      'sdk',
      ctx
    );
  });
});

describe('createPlausibleAnalyticsInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createPlausibleAnalyticsInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'plausible-analytics'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'plausible-analytics',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'plausible-analytics',
      'sdk',
      ctx
    );
  });
});

describe('createBlueskySocialPdsInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createBlueskySocialPdsInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'bluesky-social-pds'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'bluesky-social-pds',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'bluesky-social-pds',
      'sdk',
      ctx
    );
  });
});

describe('createDocusealcoDocusealInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createDocusealcoDocusealInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'docusealco-docuseal'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'docusealco-docuseal',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'docusealco-docuseal',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnPdsAdminInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnPdsAdminInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('eyevinn-pds-admin');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-pds-admin',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-pds-admin',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnCeSampleWebhookInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnCeSampleWebhookInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-ce-sample-webhook'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-ce-sample-webhook',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-ce-sample-webhook',
      'sdk',
      ctx
    );
  });
});

describe('createDrawdbIoDrawdbInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createDrawdbIoDrawdbInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith('drawdb-io-drawdb');
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'drawdb-io-drawdb',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'drawdb-io-drawdb',
      'sdk',
      ctx
    );
  });
});

describe('createEyevinnAiCodeReviewerInstance', () => {
  it('should call createInstance', async () => {
    const ctx = new Context();
    const body = { name: 'sdk' };
    await sdk.createEyevinnAiCodeReviewerInstance(ctx, body as any);
    expect(ctx.getServiceAccessToken).toHaveBeenCalledWith(
      'eyevinn-ai-code-reviewer'
    );
    expect(createInstance).toHaveBeenCalledWith(
      ctx,
      'eyevinn-ai-code-reviewer',
      'token',
      body
    );
    expect(waitForInstanceReady).toHaveBeenCalledWith(
      'eyevinn-ai-code-reviewer',
      'sdk',
      ctx
    );
  });
});
