import { spawnSync } from 'child_process';
import { appendFileSync, writeFileSync } from 'node:fs';

const CATALOG_SVC_URL =
  process.env.CATALOG_SVC_URL || 'https://catalog.svc.prod.osaas.io';
const CATALOG_SVC_API_KEY = process.env.CATALOG_SVC_API_KEY;

function toPascalCase(input: string): string {
  return input
    .split(/[\s-_]+/)
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join('');
}

interface Service {
  serviceId: string;
  apiUrl: string;
  serviceType: string;
}

async function generate(service: Service) {
  if (service.serviceType === 'instance') {
    const serviceId = service.serviceId;
    const openapiUrl = new URL('/docs/json', service.apiUrl);
    spawnSync('npx', [
      'openapi-typescript',
      openapiUrl.toString(),
      '-o',
      `src/generated/${serviceId}.ts`
    ]);
    const resource = `
export type ${toPascalCase(serviceId)} =
  paths['${
    new URL(service.apiUrl).pathname
  }/{id}']['get']['responses']['200']['schema'];
`;
    appendFileSync(`./src/generated/${serviceId}.ts`, resource);

    const config = `
export type ${toPascalCase(serviceId)}Config =
  paths['${
    new URL(service.apiUrl).pathname
  }']['post']['parameters']['body']['body'];
`;
    appendFileSync(`./src/generated/${serviceId}.ts`, config);

    const create = `
import { Context, createInstance } from "@osaas/client-core";

export async function create${toPascalCase(
      serviceId
    )}Instance(ctx: Context, body: ${toPascalCase(
      serviceId
    )}Config): Promise<${toPascalCase(serviceId)}> {
  const serviceAccessToken = await ctx.getServiceAccessToken(
    '${serviceId}'
  );      
  return await createInstance(
    ctx,
    '${serviceId}',
    serviceAccessToken,
    body
  ); 
}      
`;
    appendFileSync(`./src/generated/${serviceId}.ts`, create);

    const indexTs = `export { ${toPascalCase(serviceId)},\n ${toPascalCase(
      serviceId
    )}Config,\n create${toPascalCase(
      serviceId
    )}Instance } from './generated/${serviceId}';\n`;
    appendFileSync('./src/index.ts', indexTs);
  }
}

async function main() {
  if (!CATALOG_SVC_API_KEY) {
    console.error('Missing CATALOG_SVC_API_KEY');
    process.exit(1);
  }

  const indexTs = `/**
  * This file was auto-generated by openapi-typescript.
  * Do not make direct changes to the file.
  */
  `;
  writeFileSync('./src/index.ts', indexTs);

  const res = await fetch(new URL('/service', CATALOG_SVC_URL), {
    headers: {
      Authorization: `Bearer ${CATALOG_SVC_API_KEY}`,
      'Content-Type': 'application/json'
    },
    method: 'GET'
  });
  if (res.ok) {
    const services: Service[] = (await res.json()) as Service[];
    for (const service of services) {
      await generate(service);
    }
  }
}

main();
